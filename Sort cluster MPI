#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <mpi.h>

void Check_for_error(int local_ok, char fname[], char message[], MPI_Comm comm);
void Get_dims(int* m_p, int* local_m_p, int* n_p, int* local_n_p, int my_rank, int comm_sz, MPI_Comm comm);
void Allocate_arrays(double** local_A_pp, double** local_x_pp, double** local_y_pp, int local_m, int n, int local_n, MPI_Comm comm);
void Generate_random_matrix(double local_A[], int local_m, int n);
void Generate_random_vector(double local_vec[], int local_n);
void Mat_vect_mult(double local_A[], double local_x[], double local_y[], int local_m, int n, int local_n, MPI_Comm comm);

int main(void) {
    double* local_A;
    double* local_x;
    double* local_y;
    int m, local_m, n, local_n;
    int my_rank, comm_sz;
    MPI_Comm comm;

    MPI_Init(NULL, NULL);
    comm = MPI_COMM_WORLD;
    MPI_Comm_size(comm, &comm_sz);
    MPI_Comm_rank(comm, &my_rank);

    Get_dims(&m, &local_m, &n, &local_n, my_rank, comm_sz, comm);
    Allocate_arrays(&local_A, &local_x, &local_y, local_m, n, local_n, comm);

    srand(time(NULL));
    Generate_random_matrix(local_A, local_m, n);
    Generate_random_vector(local_x, local_n);

    Mat_vect_mult(local_A, local_x, local_y, local_m, n, local_n, comm);

    free(local_A);
    free(local_x);
    free(local_y);
    MPI_Finalize();
    return 0;
}

void Check_for_error(int local_ok, char fname[], char message[], MPI_Comm comm) {
    int ok;
    MPI_Allreduce(&local_ok, &ok, 1, MPI_INT, MPI_MIN, comm);
    if (ok == 0) {
        int my_rank;
        MPI_Comm_rank(comm, &my_rank);
        if (my_rank == 0) {
            fprintf(stderr, "Proc %d > In %s, %s\n", my_rank, fname, message);
            fflush(stderr);
        }
        MPI_Finalize();
        exit(-1);
    }
}

void Get_dims(int* m_p, int* local_m_p, int* n_p, int* local_n_p, int my_rank, int comm_sz, MPI_Comm comm) {
    int local_ok = 1;
    if (my_rank == 0) {
        printf("Enter the number of rows\n");
        scanf("%d", m_p);
        printf("Enter the number of columns\n");
        scanf("%d", n_p);
    }
    MPI_Bcast(m_p, 1, MPI_INT, 0, comm);
    MPI_Bcast(n_p, 1, MPI_INT, 0, comm);
    if (*m_p <= 0 || *n_p <= 0 || *m_p % comm_sz != 0 || *n_p % comm_sz != 0) local_ok = 0;
    Check_for_error(local_ok, "Get_dims", "m and n must be positive and evenly divisible by comm_sz", comm);
    *local_m_p = *m_p / comm_sz;
    *local_n_p = *n_p / comm_sz;
}

void Allocate_arrays(double** local_A_pp, double** local_x_pp, double** local_y_pp, int local_m, int n, int local_n, MPI_Comm comm) {
    int local_ok = 1;
    *local_A_pp = malloc(local_m * n * sizeof(double));
    *local_x_pp = malloc(local_n * sizeof(double));
    *local_y_pp = malloc(local_m * sizeof(double));
    if (*local_A_pp == NULL || *local_x_pp == NULL || *local_y_pp == NULL) local_ok = 0;
    Check_for_error(local_ok, "Allocate_arrays", "Can't allocate local arrays", comm);
}

void Generate_random_matrix(double local_A[], int local_m, int n) {
    for (int i = 0; i < local_m; i++) {
        for (int j = 0; j < n; j++) {
            local_A[i * n + j] = (double)(rand() % 501); // Valores entre 0 y 500
        }
    }
}

void Generate_random_vector(double local_vec[], int local_n) {
    for (int i = 0; i < local_n; i++) {
        local_vec[i] = (double)(rand() % 501); // Valores entre 0 y 500
    }
}

void Mat_vect_mult(double local_A[], double local_x[], double local_y[], int local_m, int n, int local_n, MPI_Comm comm) {
    double* x;
    int local_i, j;
    int local_ok = 1;

    x = malloc(n * sizeof(double));
    if (x == NULL) local_ok = 0;
    Check_for_error(local_ok, "Mat_vect_mult", "Can't allocate temporary vector", comm);
    MPI_Allgather(local_x, local_n, MPI_DOUBLE, x, local_n, MPI_DOUBLE, comm);

    for (local_i = 0; local_i < local_m; local_i++) {
        local_y[local_i] = 0.0;
        for (j = 0; j < n; j++)
            local_y[local_i] += local_A[local_i * n + j] * x[j];
    }
    free(x);
}
